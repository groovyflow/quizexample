This project was originally based on code from https://github.com/spring-projects/spring-test-mvc, especially rest-unit, and https://github.com/nebhale/spring-one-2013/tree/master/rest-ful-api-design
Thanks to Petri Kainulainen and Ben Hale 

Building quiz with the Spring Framework 3.2
Here users are expected to look at content after answering a quiz question, so we don't return the next question until the client asks for it.

No HTML or Javascript yet.  Just a RESTful interface that we expect our GUI to use.

There are several nice tricks here, including configuring a JSON converter that knows not to attempt to render lazy loaded fields of a Hibernate domatin object, and a JSON annotation on domain objects that prevent the JSON conververt from causing an infinite recursion.  You need something like this if you don't want to automatically create a DTO for every Hibernate/JPA object your api returns.

TODO: add Spring Security (with a real UserDetailsService, a real User-with-grants-jpa-object, and caching the user Details with ehCache,  some sfl4j logging.
See http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/ 
<jdbc-user-service data-source-ref="securityDataSource"/> and around there
1.1. User Schema

TODO: @ExceptionHandler as in Ben Hale's rest-ful-api-design, https://www.youtube.com/watch?v=wylViAqNiRA starting into minute 59
@ExceptionHandler({ GameDoesNotExistException.class, DoorDoesNotExistException.class })
ResponseEntity<String> handleXXExceptions(Exception e)

For Spring Security see:
http://www.petrikainulainen.net/programming/spring-framework/integration-testing-of-spring-mvc-applications-security/
http://www.baeldung.com/2011/10/31/securing-a-restful-web-service-with-spring-security-3-1-part-3/#ch_3_2  and https://github.com/eugenp/tutorials

THIS URL shows how to use Jackson's Object Mapper to convert a JSON String into a Map. 
I might do this to compare JSON sent from our RESTful services with the expectation, and here the expectation could be rendered as a Map.
We could say: Is this expected Map contained in this map transformed from the original JSON?
We'd ask contained-in rather then equals because it's ok if a few fields that the GUI doesn't need are sent in the JSON
http://djna.wordpress.com/2010/03/12/json-strings-no-rest-using-the-jackson-parser/

@@@@@@
More on Spring Security:
http://www.youtube.com/watch?v=qoR6lY6biO4

csrf and iFrame/clickjacking protection not enabled by default in xml configuration.
By the way, csrf requires a hidden input, and clickjacking is proteced because a header says X-Frame-Optons: DENY
Starting around minute 30 or 31.
Note that if we enable these protections our REST requests will need to send that hidden csrf input.
When not doing REST you can use server side rendering like thymeleaf or jsps that integrate with Spring security and no to send the csrf parameter or whatever it is

UserDetailsService  minute 41  Can our DetailsService just be scanned?, but if doing it in xml probabaly we'll just reference it
@CurrentUser   minute 44
that's an argument in a method, like so x(@CurrentUser user, ...)
And I'm not sure that @CurrentUser annotation is in a Spring library!! The annotation can be found in the github project by the guy giving the above youtube talk:
https://github.com/rwinch/gs-spring-security-3.2/blob/master/src/main/java/sample/security/CurrentUser.java
CurrentUser doesn't seem to work for me.

For xml config, see:
http://docs.spring.io/spring-security/site/docs/3.1.x/reference/appendix-namespace.html#nsa-user-service
Search for user-service-ref in B.2.2.  Also see the previous page, which has an example app.

To see an example of a UserDetailsService  calling a JPA repository (but with hard coded GrantedAuthorities) see
https://github.com/rwinch/gs-spring-security-3.2/blob/master/src/main/java/sample/security/UserRepositoryUserDetailsService.java

I think the problem I'm having with errors where the User is transient or NullPointer User exceptions is that the browser isn't cleared of its previous session, I ring the server
down, and the browser, having not logged out, still has the cookie.  Not sure exactly what's going on, but I think this is the only time I'm having problems.



//See https://github.com/rwinch/gs-spring-security-3.2/blob/master/src/main/java/sample/config/H2Initializer.java