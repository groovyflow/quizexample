This project was originally based on code from https://github.com/spring-projects/spring-test-mvc, especially rest-unit, and https://github.com/nebhale/spring-one-2013/tree/master/rest-ful-api-design
Thanks to Petri Kainulainen and Ben Hale 

Building quiz with the Spring Framework 3.2
Here users are expected to look at content after answering a quiz question, so we don't return the next question until the client asks for it.

No HTML or Javascript yet.  Just a RESTful interface that we expect our GUI to use.

There are several nice tricks here, including configuring a JSON converter that knows not to attempt to render lazy loaded fields of a Hibernate domatin object, and a JSON annotation on domain objects that prevent the JSON conververt from causing an infinite recursion.  You need something like this if you don't want to automatically create a DTO for every Hibernate/JPA object your api returns.

TODO: add Spring Security,  some sfl4j logging.
TODO: @ExceptionHandler as in Ben Hale's rest-ful-api-design, https://www.youtube.com/watch?v=wylViAqNiRA starting into minute 59
@ExceptionHandler({ GameDoesNotExistException.class, DoorDoesNotExistException.class })
ResponseEntity<String> handleXXExceptions(Exception e)

THIS URL shows how to use Jackson's Object Mapper to convert a JSON String into a Map. 
I might do this to compare JSON sent from our RESTful services with the expectation, and here the expectation could be rendered as a Map.
We could say: Is this expected Map contained in this map transformed from the original JSON?
We'd ask contained-in rather then equals because it's ok if a few fields that the GUI doesn't need are sent in the JSON
http://djna.wordpress.com/2010/03/12/json-strings-no-rest-using-the-jackson-parser/

