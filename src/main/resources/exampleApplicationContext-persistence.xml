<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:repository="http://www.springframework.org/schema/data/repository"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <context:property-placeholder location="classpath:application.properties"/>

    <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource">
        <property name="driverClass" value="${db.driver}"/>
        <property name="jdbcUrl" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>
    
    <!-- As an alternative, for embedded databases see <jdbc:embedded-database/>. -->
     <jdbc:initialize-database data-source="dataSource">
        <!-- <jdbc:script location="${db.initLocation}"/> --> 
        <jdbc:script location="${db.dataLocation}"/>
    </jdbc:initialize-database>   

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <tx:annotation-driven/>

    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <property name="packagesToScan" value="org.tassoni.quizexample.model"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.ejb.naming_strategy">${hibernate.ejb.naming_strategy}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            </props>
        </property>
    </bean>

 
   <!-- CHUCK!! We use the silly jpa repository scan that only finds extenders of JpaRepository<Entity, PrimaryKey>
        and exclude our BasicRepository.  The BasicRepository is found by good old context:component-scan,
        which only includes the BasicRepository.*  Maybe we should put them in separate packages so this isn't
        so delicate.
        But see the note about sprint-nanotrader-data below
        TODO Clean this mess up until we figure out Spring data!  Maybe give up Spring-data for now, and just use BasicRepository.
    -->
    <jpa:repositories base-package="org.tassoni.quizexample.repository">
    	<repository:exclude-filter type="regex" expression="org.tassoni.quizexample.repository.BasicRepos.*" />
    </jpa:repositories>
        <context:component-scan
            base-package="org.tassoni.quizexample.repository">
    <context:include-filter type="regex" 
                       expression="org.tassoni.quizexample.repository.BasicRepos.*" />
    </context:component-scan>    
                      
<!-- Here's what spring-nanotrader-data/src/main/resources/META-INF/spring/applicationContext-jpa.xml does.  
Note repositories instead of jpa:repositories.  And nanotrader doesn't have the same problems I have here.
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<repositories base-package="org.springframework.nanotrader" />


</beans:beans>


 -->                      
                      
</beans>